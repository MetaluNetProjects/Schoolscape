def ofRoot(){ return '../../../' }

// Load common functions
apply from: ofRoot()+"libs/openFrameworksCompiled/project/android/common-functions.gradle"

buildscript {
    apply from: "../../../libs/openFrameworksCompiled/project/android/ndk-verify.gradle"

    repositories {
        // Gradle 4.1 and higher include support for Google's Maven repo using
        // the google() method. And you need to include this repo to download
        // Android Gradle plugin 3.0.0 or higher
        // google()
        jcenter()
    }
    dependencies {
        //classpath 'com.android.tools.build:gradle:2.3.0'
        classpath 'com.android.tools.build:gradle-experimental:0.9.3'
    }
}

allprojects {
    repositories {
        jcenter()
        maven{ url "https://maven.google.com" }
    }
}

apply plugin: 'com.android.model.application'

model {
    android {
        // openFrameworks currently only supports compiling against SDK 19 or nweer
        compileSdkVersion = 30
        buildToolsVersion = "30.0.0-rc4"

        defaultConfig {
            minSdkVersion.apiLevel    = 19
            targetSdkVersion.apiLevel = 30
            versionCode     =  1
            versionName     = "1.0"
            externalNativeBuild {
                ndkBuild {
                    // Sets an optional flag for the C compiler.
                    //cFlags "-DHAVE_UNISTD_H", "-DUSEAPI_DUMMY", "-DPD", "-DLIBPD_EXTRA", "-DLIBPD_USE_STD_MUTEX"
                    //cppFlags "-DPD"
                }
            }
        }        

        //defaultConfig.with {
        //    minSdkVersion.apiLevel    = 19
        //    targetSdkVersion.apiLevel = 30
        //    versionCode     =  1
        //    versionName     = "1.0"
        //}
    }

    android.ndk {
        moduleName = ofAppModuleName()
        toolchain  = buildToolchain()
        stl        = compilerStl()
        platformVersion = "21"
    }

    android.sources {
        main {
            jni {
                source {
                    srcDirs= appSrcDirs(ofRoot())

                    includes = srcIncludes(ofRoot())
                    excludes = srcExcludes(ofRoot())
                }

                // Link to openFrameworks
                dependencies {
                    project ":openFrameworksProject"  linkage "static"
                }
            }

            manifest {
                source {
                    srcDirs = [ "." ]
                }
            }
            res {
                source {
                    srcDirs = [ "res" ]
                }
            }
            java {
                source {
                    srcDirs = [ "srcJava" ]
                }
            }
            aidl {
                source{
                    srcDirs = ['srcJava']
                }
            }
            renderscript{
                source{
                    srcDirs = ['srcJava']
                }
            }
            jniLibs {
                source {
                    srcDirs = ['libs']
                }
            }
            assets {
                source {
                    srcDirs = ['bin/data'] + addonData(ofRoot())
                }
            }
        }
    }

    android.lintOptions {
        abortOnError  = false
    }

    android.buildTypes {
        release {
            minifyEnabled = false
        }
    }

    // Setup the different types of flavors (arm / x86),
    // and add linker flags based on that
    android.productFlavors {
        getAbis().each { abi ->
            create(getFlavorName(abi)) {
                ndk {
                    abiFilters.add(abi)

                    cppFlags.addAll(coreCppFlags(abi, ofRoot()))
                    cppFlags.addAll(addonCppFlags(abi, ofRoot()))
                    CFlags.addAll(addonCppFlags(abi, ofRoot()))
                    cppFlags.addAll("-DLINK_PLATFORM_LINUX=1", "-Wno-multichar", "-DABL_LINK_OFFSET_MS=0", "-std=c++11")
                    cppFlags.addAll("-I" + projectDir + "/src/abl_link/android-ifaddrs")
                    cppFlags.addAll("-I" + projectDir + "/src/abl_link/link/include")
                    cppFlags.addAll("-I" + projectDir + "/src/abl_link/link/modules/asio-standalone/asio/include")
                    CFlags.addAll("-I" + projectDir + "/src/externals/cyclone/shared/")


                    ldFlags.addAll(addonLdFlags(abi, ofRoot()))
                    ldFlags.addAll(coreLdFlags(abi, ofRoot()))

                    ldLibs.addAll(addonLdLibs(abi, ofRoot()))
                    ldLibs.addAll(coreLdLibs(abi, ofRoot()))

                    //cppFlags.add("-DPD -DHAVE_UNISTD_H -DUSEAPI_DUMMY -DLIBPD_EXTRA")
                    //cppFlags.add("-DPD")
                }
            }
        }
    }
}

dependencies {
    addonJavaDependencies(ofRoot()).each { dep ->
        compile(project(path: dep[1] ))
    }
    compile project(path: ':ofAndroidLib')
}
